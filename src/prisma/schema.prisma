generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id               Int           @id @default(autoincrement())
  firstName        String?       @map("first_name") @db.VarChar(30)
  middleName       String?       @map("middle_name") @db.VarChar(30)
  lastName         String?       @map("last_name") @db.VarChar(30)
  preferredName    String?       @map("preferred_name") @db.VarChar(30)
  email            String?       @unique
  mobile           String?       @db.VarChar(30)
  ageGroup         String?       @map("age_group") @db.VarChar(10)
  membershipType   String?       @map("membership_type") @db.VarChar(10)
  membershipNumber Int?          @map("membership_number")
  bmfaNumber       Int?          @map("bmfa_number")
  flyerId          String?       @map("flyer_id")
  operatorId       String?       @map("operator_id")
  addressId        Int?          @map("address_id")
  nonClubContact   Boolean?      @map("non_club_contact")
  bmfaThroughClub  Boolean?      @map("bmfa_through_club")
  createdAt        DateTime      @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime      @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("updated_at") @db.Timestamp(6)
  achievements     Achievement[] @relation(map: "FK_achievement_member_id")
  address          Address?      @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_member_address_id")

  @@map("member")
}

model Address {
  id           Int      @id @default(autoincrement())
  addressLine1 String?  @map("address_line_1") @db.VarChar(50)
  addressLine2 String?  @map("address_line_2") @db.VarChar(50)
  town         String?  @db.VarChar(30)
  county       String?  @db.VarChar(30)
  postcode     String?  @db.VarChar(10)
  createdAt    DateTime @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("updated_at") @db.Timestamp(6)
  members      Member[] @relation(map: "FK_member_address_id")

  @@map("address")
}

model AchievementCategory {
  id            Int           @id @default(autoincrement())
  title         String?       @db.VarChar(40)
  isEndorsement Boolean       @default(false) @map("is_endorsement") @db.Boolean
  createdAt     DateTime      @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime      @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("updated_at") @db.Timestamp(6)
  achievements  Achievement[] @relation(map: "FK_achievement_achievement_category_id")

  @@map("achievement_category")
}

model Achievement {
  id                    Int                  @id @default(autoincrement())
  title                 String?              @db.VarChar(40)
  code                  String?              @db.VarChar(10)
  achievementCategoryId Int?                 @map("achievement_category_id")
  createdAt             DateTime             @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime             @default(dbgenerated("('now'::text)::timestamp(6) with time zone")) @map("updated_at") @db.Timestamp(6)
  achievementCategory   AchievementCategory? @relation(fields: [achievementCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_achievement_achievement_category_id")
  members               Member[]             @relation(map: "FK_achievement_member_id")

  @@map("achievement")
}
